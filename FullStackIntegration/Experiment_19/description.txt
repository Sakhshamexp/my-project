Project Goal and Setup
----------------------
This experiment, "Connecting React Frontend to Express API Using Axios," focused on getting a full-stack app’s frontend and backend to communicate smoothly. The 
goal was to set up a working connection between a React interface and a simple Express.js API, using Axios to handle HTTP requests.

Project Structure:
- Backend: Node.js API in server_api.js
- Frontend: React app with fetching logic in src/App.js

How the Communication Works
A. Express Backend:
- CORS Setup: Because React (port 3000) and Express (port 5001) run on different ports, I added the cors middleware with { origin: "*" } to allow cross-origin
  requests. This is crucial—without it, the browser would block the request.
- Data Endpoint: A GET route at /api/products returns a hardcoded list of products.
- Simulated Delay: A 500ms setTimeout mimics real-world network latency, ensuring the frontend can handle slight delays gracefully.

B. React Frontend:
- Axios Role: Handles asynchronous requests cleanly, easier than the native fetch.
- Timing: API call is inside useEffect with an empty dependency array [], so it fires once on component mount.
- State Management: useState tracks three key states:
  - loading → shows "Loading..."
  - products → stores data on success
  - error → shows a message if something fails

Practical Results and Analysis::
- Backend Confirmation: Express runs on port 5001; hitting /api/products logs a confirmation and returns JSON after the half-second delay.
- Frontend Reliability:
  - Axios correctly fetches data from http://localhost:5001/api/products
  - .then() updates the state with the products; .catch() handles errors.
  - Conditional rendering ensures users see loading → data → error in order.

Learning outcomes:
1. CORS is essential for split-port full-stack apps. Without it, the frontend cannot fetch data.
2. React fetching pattern: Using useEffect + useState to manage loading, success, and error states creates a reliable, user-friendly interface.
3. Full-stack flow mastery: Demonstrated the complete flow—React → Axios → Express API → JSON → React state → UI render.
